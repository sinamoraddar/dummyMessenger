{"version":3,"sources":["Components/SideBar/SideBarItem/SideBarItem.module.scss","Components/Dashboard/Messenger/ChatList/ChatList.module.scss","Components/SideBar/SideBar.module.scss","Components/Dashboard/DashBoard.module.scss","Components/Dashboard/Messenger/ChatList/ChatItem/ChatItem.module.scss","Components/Dashboard/TabBar/TabBarItem/TabBarItem.module.scss","Components/SideBar/ToggleSideBarButton/ToggleSideBarButton.module.scss","Components/Dashboard/TabBar/TabBar.module.scss","Components/Dashboard/Messenger/Messenger.module.scss","Components/SideBar/Avatar/Avatar.module.scss","Components/Dashboard/Messenger/ChatScreen/MessageItem/MessageItem.module.scss","Utils/channels.js","Components/Dashboard/TabBar/TabBarItem/TabBarItem.js","Components/App/AppContext.js","Components/SideBar/ToggleSideBarButton/ToggleSideBarButton.js","Components/Dashboard/TabBar/TabBar.js","firebase/firebase.js","Components/Dashboard/Messenger/ChatList/ChatItem/ChatItem.js","Components/Dashboard/Messenger/ChatList/ChatList.js","Components/Dashboard/Messenger/ChatScreen/MessageItem/MessageItem.js","Utils/userInfo.js","Components/Dashboard/Messenger/ChatScreen/ChatScreen.js","Components/Dashboard/Messenger/Messenger.js","Components/Dashboard/Welcome/Welcome.js","Components/SideBar/Avatar/Avatar.js","Components/SideBar/SideBarItem/SideBarItem.js","Components/SideBar/SideBar.js","Components/Dashboard/ChannelOne/ChannelOne.js","Components/Dashboard/ChannelThree/ChannelThree.js","Components/Dashboard/DashBoard.js","Components/Settings/Settings.js","Components/CallScreen/CallScreen.js","Components/App/App.js","serviceWorker.js","index.js","Components/Dashboard/Messenger/ChatScreen/ChatScreen.module.scss"],"names":["module","exports","channels","name","component","path","TabBarItem","to","exact","onClick","className","styles","tabBarItem","window","location","pathname","isCurrentTab","React","createContext","ToggleSideBarButton","AppContext","Consumer","setCurrentView","toggleSideBar","TabBar","setCurrentTab","currentTab","tabBar","map","channel","key","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","ChatItem","contact","currentChat","setCurrentChat","setCurrentMessengerView","useState","lastMessage","setLastMessage","useEffect","collection","doc","userId","get","then","querysnapshot","tempLastMessage","Object","keys","data","length","console","log","content","substring","chatItem","isActive","tempChatData","forEach","id","push","sort","a","b","submissionTime","chatId","messages","catch","error","getChatData","src","profilePic","alt","text","ChatList","contactsList","currentMessengerView","filterBy","setFilterBy","chatList","isCurrentMessengerView","isNotCurrentMessengerView","searchInput","type","placeholder","value","onChange","e","target","chatItemContainer","tempContactsList","createChatList","filter","includes","filterContactList","Fragment","loading","MessageItem","author","chat","deleteMessage","container","profilePicture","lastName","message","deleteButton","messageId","class","moment","format","userInfo","number","event","delete","tempMessagesList","submitMessage","currentMessage","setCurrentMessage","tempUuid","uuidv1","tempMessage","valueOf","set","updateCurrentChat","ChatScreen","setContactsList","slice","updateLastmessage","chatScreen","close","messageScreen","messageContainer","typingArea","Messenger","props","querySnapshot","messenger","Welcome","Avatar","avatar","SideBarItem","icon","isOpen","currentPage","setCurrentPage","sideBarItem","isCurrentPage__opened","isCurrentPage__closed","icon__opened","icon__closed","style","background","SideBar","setIsOpen","currentView","sideBar","isCurrentView","isNotCurrentView","toggleButton","ChannelOne","ChannelThree","DashBoard","setDataBaseTest","tempDataBase","match","dashboard","Settings","CallScreen","App","Provider","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7b5a6112.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideBarItem\":\"SideBarItem_sideBarItem__8vHkz\",\"isCurrentPage__closed\":\"SideBarItem_isCurrentPage__closed__p9jAj\",\"isCurrentPage__opened\":\"SideBarItem_isCurrentPage__opened__-OSEn\",\"icon\":\"SideBarItem_icon__1r1Ev\",\"icon__opened\":\"SideBarItem_icon__opened__2L7v0\",\"isOpen\":\"SideBarItem_isOpen__1Miil\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchInput\":\"ChatList_searchInput__1M19z\",\"chatList\":\"ChatList_chatList__kTfDG\",\"chatItemContainer\":\"ChatList_chatItemContainer__2ml_5\",\"loading\":\"ChatList_loading__14HiQ\",\"isCurrentMessengerView\":\"ChatList_isCurrentMessengerView__iAydA\",\"isNotCurrentMessengerView\":\"ChatList_isNotCurrentMessengerView__2vkQe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideBar\":\"SideBar_sideBar__2fwcD\",\"slideToLeft\":\"SideBar_slideToLeft__1buZe\",\"toggleButton\":\"SideBar_toggleButton__R80kF\",\"isOpen\":\"SideBar_isOpen__1on_M\",\"isCurrentView\":\"SideBar_isCurrentView__ukDSV\",\"isNotCurrentView\":\"SideBar_isNotCurrentView__9eiwq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"DashBoard_dashboard__2cfRe\",\"slideToRight\":\"DashBoard_slideToRight__17lqP\",\"isCurrentView\":\"DashBoard_isCurrentView__2dSL_\",\"isNotCurrentView\":\"DashBoard_isNotCurrentView__14wUC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatItem\":\"ChatItem_chatItem__2BkCU\",\"text\":\"ChatItem_text__3hYlu\",\"isActive\":\"ChatItem_isActive__24FgT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabBarItem\":\"TabBarItem_tabBarItem__1MbIU\",\"isCurrentTab\":\"TabBarItem_isCurrentTab__FU3-b\",\"fillBar\":\"TabBarItem_fillBar__1ZT9V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toggleSideBar\":\"ToggleSideBarButton_toggleSideBar__14AcP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabBar\":\"TabBar_tabBar__ollAj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messenger\":\"Messenger_messenger__1tXXf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__2LfzW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MessageItem_container__3z8nV\",\"message\":\"MessageItem_message__1hngD\",\"profilePicture\":\"MessageItem_profilePicture__1G55h\",\"message--user\":\"MessageItem_message--user__pCx89\",\"appearAnimation--Left\":\"MessageItem_appearAnimation--Left__JAvGz\",\"message--friend\":\"MessageItem_message--friend__-Yjma\",\"appearAnimation--Right\":\"MessageItem_appearAnimation--Right__ID3-M\",\"deleteButton\":\"MessageItem_deleteButton__2S5dC\",\"deleteButton--right\":\"MessageItem_deleteButton--right__1Qwnf\",\"time--user\":\"MessageItem_time--user__U18Oy\",\"time--friend\":\"MessageItem_time--friend__7XEL8\",\"left\":\"MessageItem_left__1Zogv\",\"right\":\"MessageItem_right__281NC\"};","export const channels = [\r\n  {\r\n    name: \"Channel 1\",\r\n    component: \"ChannelOne\",\r\n    path: \"/channel1\"\r\n  },\r\n  {\r\n    name: \"Channel 2\",\r\n    component: \"Messenger\",\r\n    path: \"/messenger\"\r\n  },\r\n  {\r\n    name: \"Channel 3\",\r\n    component: \"ChannelThree\",\r\n    path: \"/channel3\"\r\n  }\r\n];\r\n","import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./TabBarItem.module.scss\";\r\n\r\nconst TabBarItem = ({ name, path }) => {\r\n  return (\r\n    <Link\r\n      to={path}\r\n      exact\r\n      onClick={() => {}}\r\n      className={`${styles.tabBarItem} \r\n      /* set the active styles for the tab if its path */\r\n      ${window.location.pathname === path &&\r\n        styles.isCurrentTab}`}\r\n    >\r\n      {name}\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default TabBarItem;\r\n","import React from \"react\";\r\n\r\nexport default React.createContext();\r\n","import React from \"react\";\r\nimport AppContext from \"../../App/AppContext\";\r\nimport styles from \"./ToggleSideBarButton.module.scss\";\r\n\r\nconst ToggleSideBarButton = () => (\r\n  <AppContext.Consumer>\r\n    {({ setCurrentView }) => (\r\n      <button\r\n        className={styles.toggleSideBar}\r\n        onClick={() => setCurrentView(\"sideBar\")}\r\n      >\r\n        sidebar\r\n      </button>\r\n    )}\r\n  </AppContext.Consumer>\r\n);\r\n\r\nexport default ToggleSideBarButton;\r\n","import React from \"react\";\r\nimport { channels } from \"../../../Utils/channels\";\r\nimport TabBarItem from \"./TabBarItem/TabBarItem\";\r\nimport ToggleSideBarButton from \"../../SideBar/ToggleSideBarButton/ToggleSideBarButton\";\r\nimport styles from \"./TabBar.module.scss\";\r\nconst TabBar = ({ setCurrentTab, currentTab }) => (\r\n  <header className={styles.tabBar}>\r\n    <nav>\r\n      {channels.map(channel => (\r\n        <TabBarItem\r\n          key={channel.name}\r\n          {...channel}\r\n          setCurrentTab={setCurrentTab}\r\n          currentTab={currentTab}\r\n        />\r\n      ))}\r\n    </nav>\r\n    <ToggleSideBarButton />\r\n  </header>\r\n);\r\n\r\nexport default TabBar;\r\n","// Firebase App (the core Firebase SDK) is always required and must be listed first\r\nimport * as firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\n// If you enabled Analytics in your project, add the Firebase SDK for Analytics\r\nimport \"firebase/analytics\";\r\nimport { contacts } from \"../Utils/contacts\";\r\nimport uuidv1 from \"uuid/v1\";\r\nimport moment from \"moment\";\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyB6xS5yf1JofwEnHY6ApmUwALoi49MeIdw\",\r\n  authDomain: \"dummymessenger-5fe99.firebaseapp.com\",\r\n  databaseURL: \"https://dummymessenger-5fe99.firebaseio.com\",\r\n  projectId: \"dummymessenger-5fe99\",\r\n  storageBucket: \"dummymessenger-5fe99.appspot.com\",\r\n  messagingSenderId: \"915877512487\",\r\n  appId: \"1:915877512487:web:2460762b4b1ca8ebb79502\",\r\n  measurementId: \"G-1J2D8H4CJ6\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nconst database = firebase.firestore();\r\nfirebase.analytics();\r\n\r\n//initialize chats collection\r\n/* database\r\n  .collection(\"users\")\r\n  .get()\r\n  .then(function(querySnapshot) {\r\n    querySnapshot.forEach(function(doc) {\r\n      // doc.data() is never undefined for query doc snapshots\r\n      console.log(doc.id, \" => \", doc.data());\r\n      const tempUUID = uuidv1();\r\n      database\r\n        .collection(\"chats\")\r\n        .doc(doc.id)\r\n        .collection(\"messages\")\r\n        .doc(tempUUID)\r\n        .set([\r\n          {\r\n            messageId: tempUUID,\r\n            author: doc.id,\r\n            content: `\r\n            \r\n    hey there i'm fusing this app for the first time `,\r\n            submissionTime: moment().valueOf()\r\n          }\r\n        ])\r\n        .then(doc => {\r\n          console.log(doc);\r\n        })\r\n        .catch(error => console.log(error));\r\n      // console.log(doc);\r\n      // if (doc.exists) {\r\n      //   console.log(\"Document data:\", doc.data());\r\n      // } else {\r\n      //   // doc.data() will be undefined in this case\r\n      //   console.log(\"No such document!\");\r\n      // }\r\n    });\r\n  })\r\n  .catch(function(error) {\r\n    console.log(\"Error getting document:\", error);\r\n  }); */\r\n\r\nexport { database, firebase as default };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { database } from \"../../../../../firebase/firebase\";\r\nimport styles from \"./ChatItem.module.scss\";\r\n\r\nconst getChatData = (userId, setCurrentChat, contact) => {\r\n  database\r\n    .collection(\"chats\")\r\n    .doc(userId)\r\n    .collection(\"messages\")\r\n    .get()\r\n    .then(querysnapshot => {\r\n      let tempChatData = [];\r\n      querysnapshot.forEach(doc => {\r\n        /* just because we don't need the last message here,we simply ignore it */\r\n        if (doc.id !== \"lastMessage\") tempChatData.push(doc.data());\r\n      });\r\n      tempChatData.sort((a, b) => a.submissionTime - b.submissionTime);\r\n      setCurrentChat({ chatId: userId, contact, messages: tempChatData });\r\n    })\r\n    .catch(error => console.log(error));\r\n};\r\n\r\nconst ChatItem = ({\r\n  contact,\r\n  currentChat,\r\n  setCurrentChat,\r\n  setCurrentMessengerView\r\n}) => {\r\n  const [lastMessage, setLastMessage] = useState(null);\r\n  useEffect(() => {\r\n    database\r\n      .collection(\"chats\")\r\n      .doc(contact.userId)\r\n      .collection(\"messages\")\r\n      .doc(\"lastMessage\")\r\n      .get()\r\n      .then(querysnapshot => {\r\n        let tempLastMessage = \"\";\r\n        if (Object.keys(querysnapshot.data()).length > 0) {\r\n          // console.log(querysnapshot.data());\r\n          // debugger;\r\n          console.log(\"lastmessage\", querysnapshot.data());\r\n          tempLastMessage = querysnapshot.data().content;\r\n          if (tempLastMessage.length > 20) {\r\n            tempLastMessage = tempLastMessage.substring(0, 20) + \"...\";\r\n          }\r\n        }\r\n        setLastMessage(tempLastMessage);\r\n      }, []);\r\n  });\r\n  return (\r\n    <div\r\n      className={`${styles.chatItem} ${currentChat &&\r\n        contact.userId === currentChat.userId &&\r\n        styles.isActive}`}\r\n      onClick={() => {\r\n        // alert(\"hi\");\r\n        getChatData(contact.userId, setCurrentChat, contact);\r\n        setCurrentMessengerView(\"chatScreen\");\r\n        // getChatData(contact.userId);\r\n        // console.log(\"messeges\", contact.messages);\r\n      }}\r\n    >\r\n      <img src={contact.profilePic} alt={contact.name} />\r\n      <div className={styles.text}>\r\n        <h4>{contact.name}</h4>\r\n        {/* show the last message */}\r\n        <p>\r\n          {lastMessage}\r\n          {/* {getLastMessage(contact.userId)} */}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatItem;\r\n","import React, { useState } from \"react\";\r\nimport ChatItem from \"./ChatItem/ChatItem\";\r\nimport styles from \"./ChatList.module.scss\";\r\n\r\nconst createChatList = (\r\n  tempContactsList,\r\n  setCurrentChat,\r\n  currentChat,\r\n  setCurrentMessengerView\r\n) => {\r\n  // console.log(tempContactsList);\r\n  return tempContactsList.map(contact => (\r\n    <ChatItem\r\n      contact={contact}\r\n      setCurrentChat={setCurrentChat}\r\n      currentChat={currentChat}\r\n      setCurrentMessengerView={setCurrentMessengerView}\r\n    />\r\n  ));\r\n};\r\n\r\nconst filterContactList = (contactsList, filterBy) => {\r\n  // debugger;\r\n  return contactsList.filter(contact => {\r\n    return contact.name.includes(filterBy);\r\n  });\r\n};\r\n\r\nconst ChatList = ({\r\n  contactsList,\r\n  currentChat,\r\n  setCurrentChat,\r\n  currentMessengerView,\r\n  setCurrentMessengerView\r\n}) => {\r\n  const [filterBy, setFilterBy] = useState(\"\");\r\n  console.log(\"contactslist\", contactsList);\r\n  return (\r\n    <div\r\n      className={`${styles.chatList} ${\r\n        currentMessengerView === \"chatList\"\r\n          ? styles.isCurrentMessengerView\r\n          : styles.isNotCurrentMessengerView\r\n      }`}\r\n    >\r\n      <div className={styles.searchInput}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search ...\"\r\n          value={filterBy}\r\n          onChange={e => setFilterBy(e.target.value)}\r\n        />\r\n        <img src=\"./assets/icons/magnifying-glass.svg\" alt=\"search here\" />\r\n      </div>\r\n      <div className={styles.chatItemContainer}>\r\n        {contactsList ? (\r\n          createChatList(\r\n            filterContactList(contactsList, filterBy),\r\n            setCurrentChat,\r\n            currentChat,\r\n            setCurrentMessengerView\r\n          )\r\n        ) : (\r\n          <React.Fragment>\r\n            <img\r\n              className={styles.loading}\r\n              src=\"./assets/gifs/loading.svg\"\r\n              alt=\"loading\"\r\n            />\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatList;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport styles from \"./MessageItem.module.scss\";\r\nconst MessageItem = ({\r\n  author,\r\n  chat,\r\n  deleteMessage,\r\n  currentChat,\r\n  setCurrentChat\r\n}) => {\r\n  return (\r\n    <div\r\n      className={`${styles.container}\r\n    ${author.name === \"Alex\" ? styles[\"right\"] : styles[\"left\"]}\r\n    `}\r\n    >\r\n      {author.name === \"Alex\" ? (\r\n        <React.Fragment>\r\n          <img\r\n            className={styles.profilePicture}\r\n            src={author.profilePicture}\r\n            alt={`${author.name} ${author.lastName}`}\r\n          />\r\n          <div className={`${styles.message} ${styles[\"message--user\"]}`}>\r\n            {chat.content}\r\n\r\n            <button\r\n              className={`${styles.deleteButton} ${styles[\"deleteButton--right\"]}`}\r\n              onClick={e =>\r\n                deleteMessage(\r\n                  currentChat.chatId,\r\n                  chat.messageId,\r\n                  setCurrentChat,\r\n                  currentChat,\r\n                  e\r\n                )\r\n              }\r\n            >\r\n              <i class=\"icon ion-md-trash\"></i>\r\n            </button>\r\n            <span className={styles[\"time--user\"]}>\r\n              {moment(chat.submissionTime).format(\"HH : mm\")}\r\n            </span>\r\n          </div>\r\n        </React.Fragment>\r\n      ) : (\r\n        <React.Fragment>\r\n          <img\r\n            className={styles.profilePicture}\r\n            src={currentChat.contact.profilePic}\r\n            alt={currentChat.contact.name}\r\n          />\r\n          <div className={`${styles.message} ${styles[\"message--friend\"]}`}>\r\n            {chat.content}\r\n\r\n            <button\r\n              className={styles.deleteButton}\r\n              onClick={e =>\r\n                deleteMessage(\r\n                  currentChat.chatId,\r\n                  chat.messageId,\r\n                  setCurrentChat,\r\n                  currentChat,\r\n                  e\r\n                )\r\n              }\r\n            >\r\n              <i class=\"icon ion-md-trash\"></i>\r\n            </button>\r\n            <span className={styles[\"time--friend\"]}>\r\n              {moment(chat.submissionTime).format(\"HH : mm\")}\r\n            </span>\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default MessageItem;\r\n","export const userInfo = {\r\n  lastName: \"Hunter\",\r\n  name: \"Alex\",\r\n  number: \"09123456789\",\r\n  profilePicture:\r\n    \"https://i.pinimg.com/236x/da/bd/70/dabd7011f523c7676c0770eeeff43df4.jpg\"\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport MessageItem from \"./MessageItem/MessageItem\";\r\nimport uuidv1 from \"uuid/v1\";\r\nimport moment from \"moment\";\r\nimport { database } from \"../../../../firebase/firebase\";\r\nimport AppContext from \"../../../App/AppContext\";\r\nimport { userInfo } from \"../../../../Utils/userInfo\";\r\nimport styles from \"./ChatScreen.module.scss\";\r\n\r\n//update the last message document on the messages collection\r\nconst updateLastmessage = currentChat => {\r\n  let lastMessage = {};\r\n  /* get the last message only if the list isn't empty,otherwise set an empty object */\r\n  if (currentChat.messages.length > 0) {\r\n    lastMessage = currentChat.messages.slice(-1)[0];\r\n  }\r\n  database\r\n    .collection(\"chats\")\r\n    .doc(currentChat.chatId)\r\n    .collection(\"messages\")\r\n    .doc(\"lastMessage\")\r\n    .set(lastMessage)\r\n    .then(() => {\r\n      console.log(\"the last message was updated successfully\");\r\n    })\r\n    .catch(error => console.log(error));\r\n};\r\n/* delete the message */\r\nconst deleteMessage = (\r\n  chatId,\r\n  messageId,\r\n  setCurrentChat,\r\n  currentChat,\r\n  event\r\n) => {\r\n  database\r\n    .collection(\"chats\")\r\n    .doc(chatId)\r\n    .collection(\"messages\")\r\n    .doc(messageId)\r\n    .delete()\r\n    .then(() => {\r\n      let tempMessagesList = currentChat.messages.filter(\r\n        message => message.messageId !== messageId\r\n      );\r\n      setCurrentChat({ ...currentChat, messages: tempMessagesList });\r\n    })\r\n    .catch(error => console.log(error));\r\n};\r\n/* update the current chat  */\r\nconst updateCurrentChat = (\r\n  tempMessage,\r\n  currentChat,\r\n  setCurrentChat,\r\n  setCurrentMessage\r\n) => {\r\n  database\r\n    .collection(\"chats\")\r\n    .doc(currentChat.chatId)\r\n    .collection(\"messages\")\r\n    .doc(\"lastMessage\")\r\n    .set(tempMessage)\r\n    .then(() => {\r\n      // setCurrentMessage(\"\");\r\n      setCurrentChat({\r\n        ...currentChat,\r\n        messages: [...currentChat.messages, tempMessage]\r\n      });\r\n    })\r\n    .catch(error => console.log(error));\r\n};\r\n/* submit message functionality */\r\nconst submitMessage = (\r\n  currentMessage,\r\n  setCurrentMessage,\r\n  currentChat,\r\n  setCurrentChat\r\n) => {\r\n  const tempUuid = uuidv1();\r\n  const tempMessage = {\r\n    author: 0,\r\n    content: currentMessage,\r\n    messageId: tempUuid,\r\n    submissionTime: moment().valueOf()\r\n  };\r\n  /* add the submitted message to the firestore */\r\n  // debugger;\r\n  database\r\n    .collection(\"chats\")\r\n    .doc(currentChat.chatId)\r\n    .collection(\"messages\")\r\n    .doc(tempUuid)\r\n    .set(tempMessage)\r\n    .then(() => {\r\n      // alert(\"hi\");\r\n      updateCurrentChat(\r\n        tempMessage,\r\n        currentChat,\r\n        setCurrentChat,\r\n        setCurrentMessage\r\n      );\r\n    })\r\n    .catch(error => console.log(error));\r\n};\r\n\r\nconst ChatScreen = ({\r\n  currentChat,\r\n  setCurrentChat,\r\n  contactsList,\r\n  setContactsList,\r\n  currentMessengerView,\r\n  setCurrentMessengerView\r\n}) => {\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n  /* clear the typing area whenever the chat data changes */\r\n  useEffect(() => {\r\n    setCurrentMessage(\"\");\r\n    /* update the last message if the current chat data is not undefined */\r\n    if (currentChat) {\r\n      updateLastmessage(currentChat);\r\n    }\r\n  }, [currentChat]);\r\n  // debugger;\r\n  return (\r\n    <AppContext.Consumer>\r\n      {data => {\r\n        return (\r\n          <div\r\n            className={`${styles.chatScreen}\r\n        \r\n       ${\r\n         currentMessengerView === \"chatScreen\"\r\n           ? styles.isCurrentMessengerView\r\n           : styles.isNotCurrentMessengerView\r\n       }\r\n         \r\n          `}\r\n          >\r\n            {/* render chat screen only when the currentChat is not null */}\r\n            {currentChat ? (\r\n              <React.Fragment>\r\n                <button\r\n                  className={styles.close}\r\n                  onClick={() => {\r\n                    setCurrentChat(null);\r\n                    setCurrentMessengerView(\"chatList\");\r\n                  }}\r\n                >\r\n                  <i className=\"icon ion-md-close\"></i>\r\n                </button>\r\n                <div className={styles.messageScreen}>\r\n                  <div className={styles.messageContainer}>\r\n                    {currentChat.messages.map(chat =>\r\n                      chat.author === 0 ? (\r\n                        <MessageItem\r\n                          author={userInfo}\r\n                          chat={chat}\r\n                          deleteMessage={deleteMessage}\r\n                          currentChat={currentChat}\r\n                          setCurrentChat={setCurrentChat}\r\n                        />\r\n                      ) : (\r\n                        <MessageItem\r\n                          author={currentChat.contact}\r\n                          chat={chat}\r\n                          deleteMessage={deleteMessage}\r\n                          currentChat={currentChat}\r\n                          setCurrentChat={setCurrentChat}\r\n                        />\r\n                      )\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div className={styles.typingArea}>\r\n                  <textarea\r\n                    placeholder=\"write a message ...\"\r\n                    onChange={e => setCurrentMessage(e.target.value)}\r\n                    value={currentMessage}\r\n                  />\r\n                  {/* show the send button if only the currentMessage isn't empty */\r\n                  currentMessage && (\r\n                    <button\r\n                      onClick={() => {\r\n                        submitMessage(\r\n                          currentMessage,\r\n                          setCurrentMessage,\r\n                          currentChat,\r\n                          setCurrentChat\r\n                        );\r\n\r\n                        // data.setTestMessage(currentMessage);\r\n                      }}\r\n                    >\r\n                      <i className=\"icon ion-md-send\"></i>\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </React.Fragment>\r\n            ) : (\r\n              \"welcome , please select a chat to start\"\r\n            )}\r\n          </div>\r\n        );\r\n      }}\r\n    </AppContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default ChatScreen;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./Messenger.module.scss\";\r\nimport ChatList from \"./ChatList/ChatList\";\r\nimport ChatScreen from \"./ChatScreen/ChatScreen\";\r\n// import { contacts } from \"../../../Utils/contacts\";\r\nimport { database } from \"../../../firebase/firebase\";\r\nconst Messenger = props => {\r\n  // const [chatList, setChatList] = useState({});\r\n  const [currentChat, setCurrentChat] = useState(null);\r\n  const [contactsList, setContactsList] = useState(null);\r\n  const [currentMessengerView, setCurrentMessengerView] = useState(\"chatList\");\r\n  /* update the contactslist whenever the currentChat changes */\r\n  // useEffect(() => {\r\n  //   if (currentChat) {\r\n  //     setContactsList({\r\n  //       ...contactsList,\r\n  //       [currentChat.userId]: { ...currentChat }\r\n  //     });\r\n  //   }\r\n  // }, [currentChat]);\r\n  //fetch the users data\r\n  useEffect(() => {\r\n    database\r\n      .collection(\"users\")\r\n      .get()\r\n      .then(function(querySnapshot) {\r\n        const tempContactsList = [];\r\n        querySnapshot.forEach(function(doc) {\r\n          // doc.data() is never undefined for query doc snapshots\r\n          console.log(doc.id, \" => \", doc.data());\r\n          tempContactsList.push(doc.data());\r\n        });\r\n        setContactsList(tempContactsList);\r\n      })\r\n      .catch(function(error) {\r\n        console.log(\"Error getting document:\", error);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.messenger}>\r\n      <ChatList\r\n        contactsList={contactsList}\r\n        currentChat={currentChat}\r\n        setCurrentChat={setCurrentChat}\r\n        currentMessengerView={currentMessengerView}\r\n        setCurrentMessengerView={setCurrentMessengerView}\r\n      />\r\n      <ChatScreen\r\n        currentChat={currentChat}\r\n        contactsList={contactsList}\r\n        setCurrentChat={setCurrentChat}\r\n        setContactsList={setContactsList}\r\n        currentMessengerView={currentMessengerView}\r\n        setCurrentMessengerView={setCurrentMessengerView}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messenger;\r\n","import React from \"react\";\r\n\r\nconst Welcome = () => (\r\n  <div>\r\n    Welcome\r\n    <br />\r\n    Please select a part to start\r\n  </div>\r\n);\r\n\r\nexport default Welcome;\r\n","import React from \"react\";\r\nimport { userInfo } from \"../../../Utils/userInfo\";\r\nimport styles from \"./Avatar.module.scss\";\r\n\r\nconst Avatar = () => (\r\n  <figure className={styles.avatar}>\r\n    <img src={userInfo.profilePicture} alt=\"Profile\" />\r\n    <figcaption>{userInfo.name}</figcaption>\r\n  </figure>\r\n);\r\n\r\nexport default Avatar;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./SideBarItem.module.scss\";\r\n\r\nconst SideBarItem = ({\r\n  icon,\r\n  path,\r\n  name,\r\n  isOpen,\r\n  currentPage,\r\n  setCurrentPage,\r\n  setCurrentView\r\n}) => {\r\n  return (\r\n    <Link\r\n      to={path}\r\n      exact\r\n      onClick={() => {\r\n        setCurrentPage(name);\r\n        setCurrentView(name);\r\n      }}\r\n      className={`${styles.sideBarItem} ${currentPage === name &&\r\n        (isOpen ? styles.isCurrentPage__opened : styles.isCurrentPage__closed)}\r\n        ${isOpen && styles.isOpen}\r\n        `}\r\n    >\r\n      {isOpen && name}\r\n      <span\r\n        className={`${styles.icon}\r\n        ${isOpen ? styles.icon__opened : styles.icon__closed}`}\r\n        style={{\r\n          background: ` url(./assets/icons/${icon}${\r\n            currentPage === name && isOpen ? `-violet` : \"\"\r\n          }.svg)`\r\n        }}\r\n      ></span>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default SideBarItem;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport AppContext from \"../App/AppContext\";\r\nimport Avatar from \"./Avatar/Avatar\";\r\nimport SideBarItem from \"./SideBarItem/SideBarItem\";\r\nimport styles from \"./SideBar.module.scss\";\r\n\r\nconst SideBar = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(null);\r\n  useEffect(() => {\r\n    switch (window.location.pathname) {\r\n      case \"/settings\": {\r\n        setCurrentPage(\"Settings\");\r\n\r\n        break;\r\n      }\r\n      case \"/calls\": {\r\n        setCurrentPage(\"Calls\");\r\n\r\n        break;\r\n      }\r\n\r\n      default: {\r\n        setCurrentPage(\"Home\");\r\n\r\n        break;\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <AppContext.Consumer>\r\n      {({ currentView, setCurrentView }) => (\r\n        <aside\r\n          className={`${styles.sideBar} ${isOpen && styles.isOpen} ${\r\n            currentView === \"sideBar\"\r\n              ? styles.isCurrentView\r\n              : styles.isNotCurrentView\r\n          }`}\r\n        >\r\n          <button\r\n            className={styles.toggleButton}\r\n            onClick={() => setIsOpen(!isOpen)}\r\n          >\r\n            {isOpen ? (\r\n              <React.Fragment>&#215;</React.Fragment>\r\n            ) : (\r\n              <React.Fragment>&#9776;</React.Fragment>\r\n            )}\r\n          </button>\r\n          <Avatar />\r\n          <SideBarItem\r\n            path=\"/\"\r\n            icon=\"house\"\r\n            name=\"Home\"\r\n            isOpen={isOpen}\r\n            currentPage={currentPage}\r\n            setCurrentPage={setCurrentPage}\r\n            setCurrentView={setCurrentView}\r\n          />\r\n          <SideBarItem\r\n            path=\"/settings\"\r\n            icon=\"settings\"\r\n            name=\"Settings\"\r\n            isOpen={isOpen}\r\n            currentPage={currentPage}\r\n            setCurrentPage={setCurrentPage}\r\n            setCurrentView={setCurrentView}\r\n          />\r\n          <SideBarItem\r\n            path=\"/calls\"\r\n            icon=\"phone-call\"\r\n            name=\"Calls\"\r\n            isOpen={isOpen}\r\n            currentPage={currentPage}\r\n            setCurrentPage={setCurrentPage}\r\n            setCurrentView={setCurrentView}\r\n          />\r\n        </aside>\r\n      )}\r\n    </AppContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","import React from \"react\";\r\n\r\nconst ChannelOne = () => <div>this is the channelOne</div>;\r\n\r\nexport default ChannelOne;\r\n","import React from \"react\";\r\n\r\nconst ChannelThree = () => <div>this is the ChannelThree</div>;\r\n\r\nexport default ChannelThree;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport styles from \"./DashBoard.module.scss\";\r\nimport TabBar from \"../Dashboard/TabBar/TabBar\";\r\nimport Messenger from \"../Dashboard/Messenger/Messenger\";\r\nimport Welcome from \"../Dashboard/Welcome/Welcome\";\r\nimport SideBar from \"../SideBar/SideBar\";\r\nimport ChannelOne from \"../Dashboard/ChannelOne/ChannelOne\";\r\nimport ChannelThree from \"../Dashboard/ChannelThree/ChannelThree\";\r\nimport AppContext from \"../App/AppContext\";\r\nimport { database } from \"../../firebase/firebase\";\r\n\r\nconst DashBoard = props => {\r\n  const [databaseTest, setDataBaseTest] = useState(null);\r\n  useEffect(() => {\r\n    database\r\n      .collection(\"users\")\r\n      .get()\r\n      .then(querySnapshot => {\r\n        let tempDataBase = [];\r\n        querySnapshot.forEach(doc => {\r\n          // console.log(doc.data());\r\n          tempDataBase.push(doc.data());\r\n        });\r\n        console.log(\"tempDatabase\", tempDataBase);\r\n        setDataBaseTest(tempDataBase);\r\n      });\r\n  }, []);\r\n  console.log(props.match);\r\n  // const [currentTab, setCurrentTab] = useState(\"ChannelOne\");\r\n  return (\r\n    <AppContext.Consumer>\r\n      {({ currentView, setCurrentView }) => {\r\n        return (\r\n          <main\r\n            className={`${styles.dashboard} ${\r\n              currentView === \"Home\"\r\n                ? styles.isCurrentView\r\n                : styles.isNotCurrentView\r\n            }`}\r\n          >\r\n            {/* <h1>{context.testMessage}</h1> */}\r\n            <TabBar />\r\n            {/* <SideBar /> */}\r\n            {/* we add the key prop to let react router differentiate \r\n          between different renders of the same component \r\n          on different routes\r\n        */}\r\n\r\n            <Route path=\"/\" exact component={Welcome} />\r\n            <Route path=\"/messenger\" exact component={Messenger} />\r\n            <Route path=\"/channel1\" exact component={ChannelOne} />\r\n            <Route path=\"/channel3\" exact component={ChannelThree} />\r\n            {/* <Route /> */}\r\n          </main>\r\n        );\r\n      }}\r\n    </AppContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default DashBoard;\r\n","import React from \"react\";\r\nimport ToggleSideBarButton from \"../SideBar/ToggleSideBarButton/ToggleSideBarButton\";\r\n\r\nconst Settings = () => (\r\n  <div>\r\n    <ToggleSideBarButton />\r\n    settings goes here\r\n  </div>\r\n);\r\n\r\nexport default Settings;\r\n","import React from \"react\";\r\nimport ToggleSideBarButton from \"../SideBar/ToggleSideBarButton/ToggleSideBarButton\";\r\n\r\nconst CallScreen = () => (\r\n  <div>\r\n    <ToggleSideBarButton /> CallScreen goes here\r\n  </div>\r\n);\r\n\r\nexport default CallScreen;\r\n","import React, { createContext, useState } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport DashBoard from \"../Dashboard/DashBoard\";\nimport Settings from \"../Settings/Settings\";\nimport SideBar from \"../SideBar/SideBar\";\nimport CallScreen from \"../CallScreen/CallScreen\";\nimport AppContext from \"./AppContext\";\nimport \"./App.scss\";\n\nfunction App() {\n  const [currentView, setCurrentView] = useState(`sideBar`);\n  return (\n    <AppContext.Provider\n      value={{\n        currentView,\n        setCurrentView\n      }}\n    >\n      <BrowserRouter>\n        <SideBar />\n        <Switch>\n          <Route path={\"/\"} exact component={DashBoard} />\n          <Route path={\"/channel1\"} exact component={DashBoard} />\n          <Route path={\"/messenger\"} exact component={DashBoard} />\n          <Route path={\"/channel3\"} exact component={DashBoard} />\n          <Route path={\"/settings\"} exact component={Settings} />\n          <Route path={\"/calls\"} exact component={CallScreen} />\n        </Switch>\n      </BrowserRouter>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport firebase from \"./firebase/firebase\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"typingArea\":\"ChatScreen_typingArea__3btVq\",\"chatScreen\":\"ChatScreen_chatScreen__19WYi\",\"messageScreen\":\"ChatScreen_messageScreen__1Yy7r\",\"messageContainer\":\"ChatScreen_messageContainer__2D5Wm\",\"close\":\"ChatScreen_close__VBO2r\",\"isCurrentMessengerView\":\"ChatScreen_isCurrentMessengerView__1JQmj\",\"isNotCurrentMessengerView\":\"ChatScreen_isNotCurrentMessengerView__kQieG\"};"],"sourceRoot":""}